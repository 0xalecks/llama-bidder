/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LlamasInterface extends utils.Interface {
  functions: {
    "settle_current_and_create_new_auction()": FunctionFragment;
    "settle_auction()": FunctionFragment;
    "create_friend_bid(uint256,uint256,bytes)": FunctionFragment;
    "create_wl_bid(uint256,uint256,bytes)": FunctionFragment;
    "create_bid(uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdraw_stale(address[])": FunctionFragment;
    "pause()": FunctionFragment;
    "unpause()": FunctionFragment;
    "set_time_buffer(uint256)": FunctionFragment;
    "set_reserve_price(uint256)": FunctionFragment;
    "set_min_bid_increment_percentage(uint256)": FunctionFragment;
    "set_duration(uint256)": FunctionFragment;
    "set_owner(address)": FunctionFragment;
    "enable_wl()": FunctionFragment;
    "disable_wl()": FunctionFragment;
    "set_wl_signer(address)": FunctionFragment;
    "llamas()": FunctionFragment;
    "time_buffer()": FunctionFragment;
    "reserve_price()": FunctionFragment;
    "min_bid_increment_percentage()": FunctionFragment;
    "duration()": FunctionFragment;
    "auction()": FunctionFragment;
    "pending_returns(address)": FunctionFragment;
    "wl_enabled()": FunctionFragment;
    "wl_signer()": FunctionFragment;
    "wl_auctions_won(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "settle_current_and_create_new_auction"
      | "settle_auction"
      | "create_friend_bid"
      | "create_wl_bid"
      | "create_bid"
      | "withdraw"
      | "withdraw_stale"
      | "pause"
      | "unpause"
      | "set_time_buffer"
      | "set_reserve_price"
      | "set_min_bid_increment_percentage"
      | "set_duration"
      | "set_owner"
      | "enable_wl"
      | "disable_wl"
      | "set_wl_signer"
      | "llamas"
      | "time_buffer"
      | "reserve_price"
      | "min_bid_increment_percentage"
      | "duration"
      | "auction"
      | "pending_returns"
      | "wl_enabled"
      | "wl_signer"
      | "wl_auctions_won"
      | "owner"
      | "paused"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "settle_current_and_create_new_auction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settle_auction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create_friend_bid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create_wl_bid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create_bid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw_stale",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set_time_buffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reserve_price",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_min_bid_increment_percentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_duration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_owner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "enable_wl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disable_wl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_wl_signer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "llamas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "time_buffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserve_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "min_bid_increment_percentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(functionFragment: "auction", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pending_returns",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wl_enabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wl_signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wl_auctions_won",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "settle_current_and_create_new_auction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settle_auction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_friend_bid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_wl_bid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create_bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_stale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_time_buffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_reserve_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_min_bid_increment_percentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_duration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enable_wl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disable_wl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_wl_signer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "llamas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "time_buffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserve_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "min_bid_increment_percentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pending_returns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wl_enabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wl_signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wl_auctions_won",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;

  events: {
    "AuctionBid(uint256,address,uint256,bool)": EventFragment;
    "AuctionExtended(uint256,uint256)": EventFragment;
    "AuctionTimeBufferUpdated(uint256)": EventFragment;
    "AuctionReservePriceUpdated(uint256)": EventFragment;
    "AuctionMinBidIncrementPercentageUpdated(uint256)": EventFragment;
    "AuctionDurationUpdated(uint256)": EventFragment;
    "AuctionCreated(uint256,uint256,uint256)": EventFragment;
    "AuctionSettled(uint256,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionTimeBufferUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionMinBidIncrementPercentageUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AuctionBidEventObject {
  _llama_id: BigNumber;
  _sender: string;
  _value: BigNumber;
  _extended: boolean;
}
export type AuctionBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  AuctionBidEventObject
>;

export type AuctionBidEventFilter = TypedEventFilter<AuctionBidEvent>;

export interface AuctionExtendedEventObject {
  _llama_id: BigNumber;
  _end_time: BigNumber;
}
export type AuctionExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AuctionExtendedEventObject
>;

export type AuctionExtendedEventFilter = TypedEventFilter<AuctionExtendedEvent>;

export interface AuctionTimeBufferUpdatedEventObject {
  _time_buffer: BigNumber;
}
export type AuctionTimeBufferUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionTimeBufferUpdatedEventObject
>;

export type AuctionTimeBufferUpdatedEventFilter =
  TypedEventFilter<AuctionTimeBufferUpdatedEvent>;

export interface AuctionReservePriceUpdatedEventObject {
  _reserve_price: BigNumber;
}
export type AuctionReservePriceUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionReservePriceUpdatedEventObject
>;

export type AuctionReservePriceUpdatedEventFilter =
  TypedEventFilter<AuctionReservePriceUpdatedEvent>;

export interface AuctionMinBidIncrementPercentageUpdatedEventObject {
  _min_bid_increment_percentage: BigNumber;
}
export type AuctionMinBidIncrementPercentageUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionMinBidIncrementPercentageUpdatedEventObject
>;

export type AuctionMinBidIncrementPercentageUpdatedEventFilter =
  TypedEventFilter<AuctionMinBidIncrementPercentageUpdatedEvent>;

export interface AuctionDurationUpdatedEventObject {
  _duration: BigNumber;
}
export type AuctionDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionDurationUpdatedEventObject
>;

export type AuctionDurationUpdatedEventFilter =
  TypedEventFilter<AuctionDurationUpdatedEvent>;

export interface AuctionCreatedEventObject {
  _llama_id: BigNumber;
  _start_time: BigNumber;
  _end_time: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionSettledEventObject {
  _llama_id: BigNumber;
  _winner: string;
  _amount: BigNumber;
}
export type AuctionSettledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionSettledEventObject
>;

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>;

export interface WithdrawEventObject {
  _withdrawer: string;
  _amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Llamas extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LlamasInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    settle_current_and_create_new_auction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle_auction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create_friend_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create_wl_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw_stale(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_time_buffer(
      _time_buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_reserve_price(
      _reserve_price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_min_bid_increment_percentage(
      _min_bid_increment_percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_duration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_owner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enable_wl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disable_wl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_wl_signer(
      _wl_signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    llamas(overrides?: CallOverrides): Promise<[string]>;

    time_buffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserve_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    min_bid_increment_percentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    auction(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          llama_id: BigNumber;
          amount: BigNumber;
          start_time: BigNumber;
          end_time: BigNumber;
          bidder: string;
          settled: boolean;
        }
      ]
    >;

    pending_returns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wl_enabled(overrides?: CallOverrides): Promise<[boolean]>;

    wl_signer(overrides?: CallOverrides): Promise<[string]>;

    wl_auctions_won(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;
  };

  settle_current_and_create_new_auction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle_auction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create_friend_bid(
    llama_id: PromiseOrValue<BigNumberish>,
    bid_amount: PromiseOrValue<BigNumberish>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create_wl_bid(
    llama_id: PromiseOrValue<BigNumberish>,
    bid_amount: PromiseOrValue<BigNumberish>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create_bid(
    llama_id: PromiseOrValue<BigNumberish>,
    bid_amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw_stale(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_time_buffer(
    _time_buffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_reserve_price(
    _reserve_price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_min_bid_increment_percentage(
    _min_bid_increment_percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_duration(
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_owner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enable_wl(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disable_wl(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_wl_signer(
    _wl_signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  llamas(overrides?: CallOverrides): Promise<string>;

  time_buffer(overrides?: CallOverrides): Promise<BigNumber>;

  reserve_price(overrides?: CallOverrides): Promise<BigNumber>;

  min_bid_increment_percentage(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  auction(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      llama_id: BigNumber;
      amount: BigNumber;
      start_time: BigNumber;
      end_time: BigNumber;
      bidder: string;
      settled: boolean;
    }
  >;

  pending_returns(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wl_enabled(overrides?: CallOverrides): Promise<boolean>;

  wl_signer(overrides?: CallOverrides): Promise<string>;

  wl_auctions_won(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    settle_current_and_create_new_auction(
      overrides?: CallOverrides
    ): Promise<void>;

    settle_auction(overrides?: CallOverrides): Promise<void>;

    create_friend_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    create_wl_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    create_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdraw_stale(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    set_time_buffer(
      _time_buffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_reserve_price(
      _reserve_price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_min_bid_increment_percentage(
      _min_bid_increment_percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_duration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_owner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enable_wl(overrides?: CallOverrides): Promise<void>;

    disable_wl(overrides?: CallOverrides): Promise<void>;

    set_wl_signer(
      _wl_signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    llamas(overrides?: CallOverrides): Promise<string>;

    time_buffer(overrides?: CallOverrides): Promise<BigNumber>;

    reserve_price(overrides?: CallOverrides): Promise<BigNumber>;

    min_bid_increment_percentage(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    auction(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
        llama_id: BigNumber;
        amount: BigNumber;
        start_time: BigNumber;
        end_time: BigNumber;
        bidder: string;
        settled: boolean;
      }
    >;

    pending_returns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wl_enabled(overrides?: CallOverrides): Promise<boolean>;

    wl_signer(overrides?: CallOverrides): Promise<string>;

    wl_auctions_won(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AuctionBid(uint256,address,uint256,bool)"(
      _llama_id?: PromiseOrValue<BigNumberish> | null,
      _sender?: null,
      _value?: null,
      _extended?: null
    ): AuctionBidEventFilter;
    AuctionBid(
      _llama_id?: PromiseOrValue<BigNumberish> | null,
      _sender?: null,
      _value?: null,
      _extended?: null
    ): AuctionBidEventFilter;

    "AuctionExtended(uint256,uint256)"(
      _llama_id?: PromiseOrValue<BigNumberish> | null,
      _end_time?: null
    ): AuctionExtendedEventFilter;
    AuctionExtended(
      _llama_id?: PromiseOrValue<BigNumberish> | null,
      _end_time?: null
    ): AuctionExtendedEventFilter;

    "AuctionTimeBufferUpdated(uint256)"(
      _time_buffer?: null
    ): AuctionTimeBufferUpdatedEventFilter;
    AuctionTimeBufferUpdated(
      _time_buffer?: null
    ): AuctionTimeBufferUpdatedEventFilter;

    "AuctionReservePriceUpdated(uint256)"(
      _reserve_price?: null
    ): AuctionReservePriceUpdatedEventFilter;
    AuctionReservePriceUpdated(
      _reserve_price?: null
    ): AuctionReservePriceUpdatedEventFilter;

    "AuctionMinBidIncrementPercentageUpdated(uint256)"(
      _min_bid_increment_percentage?: null
    ): AuctionMinBidIncrementPercentageUpdatedEventFilter;
    AuctionMinBidIncrementPercentageUpdated(
      _min_bid_increment_percentage?: null
    ): AuctionMinBidIncrementPercentageUpdatedEventFilter;

    "AuctionDurationUpdated(uint256)"(
      _duration?: null
    ): AuctionDurationUpdatedEventFilter;
    AuctionDurationUpdated(_duration?: null): AuctionDurationUpdatedEventFilter;

    "AuctionCreated(uint256,uint256,uint256)"(
      _llama_id?: PromiseOrValue<BigNumberish> | null,
      _start_time?: null,
      _end_time?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      _llama_id?: PromiseOrValue<BigNumberish> | null,
      _start_time?: null,
      _end_time?: null
    ): AuctionCreatedEventFilter;

    "AuctionSettled(uint256,address,uint256)"(
      _llama_id?: PromiseOrValue<BigNumberish> | null,
      _winner?: null,
      _amount?: null
    ): AuctionSettledEventFilter;
    AuctionSettled(
      _llama_id?: PromiseOrValue<BigNumberish> | null,
      _winner?: null,
      _amount?: null
    ): AuctionSettledEventFilter;

    "Withdraw(address,uint256)"(
      _withdrawer?: PromiseOrValue<string> | null,
      _amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      _withdrawer?: PromiseOrValue<string> | null,
      _amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    settle_current_and_create_new_auction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle_auction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create_friend_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create_wl_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw_stale(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_time_buffer(
      _time_buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_reserve_price(
      _reserve_price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_min_bid_increment_percentage(
      _min_bid_increment_percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_duration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_owner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enable_wl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disable_wl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_wl_signer(
      _wl_signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    llamas(overrides?: CallOverrides): Promise<BigNumber>;

    time_buffer(overrides?: CallOverrides): Promise<BigNumber>;

    reserve_price(overrides?: CallOverrides): Promise<BigNumber>;

    min_bid_increment_percentage(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    auction(overrides?: CallOverrides): Promise<BigNumber>;

    pending_returns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wl_enabled(overrides?: CallOverrides): Promise<BigNumber>;

    wl_signer(overrides?: CallOverrides): Promise<BigNumber>;

    wl_auctions_won(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    settle_current_and_create_new_auction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle_auction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create_friend_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create_wl_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create_bid(
      llama_id: PromiseOrValue<BigNumberish>,
      bid_amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw_stale(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_time_buffer(
      _time_buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_reserve_price(
      _reserve_price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_min_bid_increment_percentage(
      _min_bid_increment_percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_duration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_owner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enable_wl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disable_wl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_wl_signer(
      _wl_signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    llamas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    time_buffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserve_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    min_bid_increment_percentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pending_returns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wl_enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wl_signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wl_auctions_won(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
